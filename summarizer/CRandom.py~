'''
Created on May 4, 2015

@author: rmn
'''
from __future__ import division
import codecs
import json
from summarizer.base import Summarizer
from copy import deepcopy
import random
from util.tokenization import WordTokenizer


class Summarizer(Summarizer):
    '''
    Random selection of the sentences based on citations

    '''

    def __init__(self):
        #         '''
        #         Constructor
        #
        #         Args:
        #             citations(list)
        #                 A list of strings containing citation texts
        #
        #         Important data structures being initialized:
        #             self.G: The graph of citations
        #             self.cits: Graph edges
        #                 A list of tuples: [(node1, node2, similarity), ...]
        #             self.cit_dict: Dictionary of citations
        #                 Mapping each citations text with its id
        #             self.cit_text: Dictionary of citations texts
        #         '''
        self.w_t = WordTokenizer(stem=False)

    def summarize(self, citations, max_length=250):
        '''
        Randomly select from citations

        Args:
            citations(list)
                A list of strings
            max_length(int)
                maximum length of the summary in words

        Returns
        -------
        List
            A list of ranked strings for the final summary
        '''
        final_sum = deepcopy(citations)
        while self.w_t.count_words(final_sum) > max_length:
            i = random.randint(0, len(final_sum) - 1)
            del final_sum[i]
        final_sum.pop()
        return final_sum


if __name__ == "__main__":
    with codecs.open('/Users/rmn/dev/git/naacl/data/task2_citations.json', 'rb', 'utf-8') as mf:
        data = json.load(mf)
    import itertools
    from pprint import pprint
    citations = []
    c = data['D1418_TRAIN'].values()
    citations = list(itertools.chain.from_iterable(c))
    cl = Summarizer()
    pprint(cl.summarize(citations, 200))

#     nx.draw_spring(part)
